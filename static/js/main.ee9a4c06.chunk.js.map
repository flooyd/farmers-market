{"version":3,"sources":["products.js","Product.js","actions/index.js","ProductList.js","Cart.js","App.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["Product","this","props","isInCart","dispatch","type","product","addProduct","className","title","name","totalPrice","price","onClick","handleClickButton","quantity","numCoupons","Component","connect","state","products","ProductList","map","p","i","key","getProductElements","Cart","total","count","toFixed","oatmeal","find","code","productElements","forEach","productElement","makeProductElement","push","length","processCouponsAndElements","processTotal","App","initialState","reducers","action","Object","assign","removeProduct","filter","store","createStore","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee9a4c06.chunk.js","sourcesContent":["export default [\r\n      {\"code\": \"CH1\", \"name\": \"Chai\", \"price\": 3.11},\r\n      {\"code\": \"AP1\", \"name\": \"Apples\", \"price\": 6.00},\r\n      {\"code\": \"CF1\", \"name\": \"Coffee\", \"price\": 11.23},\r\n      {\"code\": \"MK1\", \"name\": \"Milk\", \"price\": 4.75},\r\n      {\"code\": \"OM1\", \"name\": \"Oatmeal\", \"price\": 3.69}\r\n  ]\r\n","\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport { connect } from 'react-redux';\r\nimport {addProduct, removeProduct} from './actions'\r\n\r\nclass Product extends Component {\r\n    handleClickButton() {\r\n        /*redux handles updating the state, either removing the product (reducing its count), \r\n        removing it entirely (count = 0), or adding the product (increasing its count)*/\r\n        if(this.props.isInCart) {\r\n            return this.props.dispatch(removeProduct(this.props.product));\r\n        }\r\n        this.props.dispatch(addProduct(this.props.product));\r\n    }\r\n\r\n    render() {\r\n        //It might be a good idea to make a CartProduct component to avoid the conditionals...idk\r\n        return (\r\n            <div className='Product' title={this.props.isInCart ? 'cartProduct' : 'product' }>\r\n              <p>{this.props.product.name}</p>\r\n              <p>{this.props.totalPrice || this.props.product.price}</p>\r\n              <button title={this.props.isInCart ? 'cartButton' : 'button'} onClick={() => {this.handleClickButton()}}>{this.props.isInCart ? 'Remove from cart': 'Add to cart'}</button>\r\n              {this.props.isInCart ? <p className='quantity' title='quantity'>{this.props.quantity}</p> : null}\r\n              {this.props.isInCart ? <p className='coupons'>{this.props.numCoupons} coupons applied</p>: null}\r\n            </div>\r\n          );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        products: state.products\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Product);","export const addProduct = product => ({\r\n  type: 'ADD_PRODUCT',\r\n  product\r\n})\r\nexport const removeProduct = product => ({\r\n  type: 'REMOVE_PRODUCT',\r\n  product\r\n})","import React, { Component } from 'react';\r\nimport products from './products.js'; //data\r\nimport Product from './Product.js';\r\nimport './App.css';\r\n\r\nclass ProductList extends Component {\r\n  \r\n  //an array of Product components for the shopping list  \r\n  getProductElements() {\r\n    const productElements = products.map((p,i) => {\r\n      return <Product product={p} key={`productList${i}`} isInCart={false} />\r\n    })\r\n\r\n    return productElements;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <section className=\"ProductList\">\r\n          <h1>Products</h1>\r\n          {this.getProductElements()}\r\n        </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProductList;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Product from './Product.js';\r\n\r\nclass Cart extends Component {\r\n  //this takes in the number of coupons applied, the total price of each item and makes a Product component. The index is used for the key.\r\n  makeProductElement(p, i, total, numCoupons = 0) {\r\n    return <Product product={p} quantity={p.count} numCoupons={numCoupons} totalPrice={total.toFixed(2)} key={`Cart${i}`} isInCart={true} />\r\n  }\r\n\r\n  /*This seems like a pretty complicated function and is something I would like to work on more possibly*/\r\n  processCouponsAndElements(total) {\r\n    //oatmeal will be null if count is 0, which will cause the apple coupon to not be applied\r\n    let oatmeal = this.props.products.find(p => p.code === 'OM1');\r\n    let productElements = []\r\n    this.props.products.forEach((p, i) => {\r\n      let productElement;\r\n      let numCoupons;\r\n      //BOGO coupon\r\n      if (p.code === 'CF1' && p.count >= 2) {\r\n        let count = p.count;\r\n        if (count % 2 !== 0) {\r\n          //for odd numbers of coffee...\r\n          count = count - 1;\r\n        }\r\n        numCoupons = count / 2;\r\n        productElement = this.makeProductElement(p, i, (p.price * p.count) - ((count / 2) * p.price), numCoupons);\r\n        productElements.push(productElement);\r\n        return total -= (count / 2) * p.price;\r\n      }\r\n      //APOM coupon\r\n      if (p.code === 'AP1' && oatmeal) {\r\n        if (p.count >= oatmeal.count) {\r\n          numCoupons = oatmeal.count;\r\n          productElement = this.makeProductElement(p, i, (p.price * p.count) - (oatmeal.count * (p.price / 2)), numCoupons);\r\n          total -= oatmeal.count * (p.price / 2);\r\n        } else {\r\n          numCoupons = p.count;\r\n          productElement = this.makeProductElement(p, i, (p.price * p.count) - (p.count * (p.price / 2)), numCoupons);\r\n\r\n          total -= p.count * (p.price / 2);\r\n        }\r\n        return productElements.push(productElement);\r\n      }\r\n\r\n      productElements.push(this.makeProductElement(p, i, (p.count * p.price)));\r\n    });\r\n\r\n    //I return an object here to use it in two places in render (product elements and the total)\r\n    return { productElements, total: total.toFixed(2) };\r\n  }\r\n\r\n  processTotal() {\r\n    if (this.props.products.length > 0) {\r\n      let total = 0;\r\n\r\n      this.props.products.forEach(p => {\r\n        //each product has a price and quanity (count), so the initial total is easy\r\n        total += p.price * p.count;\r\n      });\r\n\r\n      let elemCoupons = this.processCouponsAndElements(total);\r\n      return this.processCouponsAndElements(total);\r\n    }\r\n\r\n    //no products in cart\r\n    return {\r\n      total: 0\r\n    };\r\n\r\n  }\r\n\r\n  render() {\r\n    const { productElements, total } = this.processTotal();\r\n    return (\r\n      <section className='Cart' title='cart'>\r\n        <h1>Cart</h1>\r\n        <p>{this.props.products.length > 0 ? null : 'No items in your cart.'}</p>\r\n        {productElements}\r\n        <h2 className='total' title='total'>Total: {total}</h2>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    products: state.products\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Cart);\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport ProductList from './ProductList';\nimport Cart from './Cart';\nimport Product from './Product.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <section className=\"App\">\n        <p className='title'>Farmer's Market</p>\n        <ProductList/>\n        <Cart/>\n      </section>\n    );\n  }\n}\n\n\nexport default App;\n","const initialState = {\r\n  products: []\r\n};\r\n\r\nconst reducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_PRODUCT':\r\n      //product will be null if the user is adding the item for the first time\r\n      let product = state.products.find(p => p.code === action.product.code);\r\n      if(!product) {\r\n      //add product and set initial count\r\n        action.product.count = 1;\r\n        return Object.assign({}, state, {\r\n          products: [...state.products, action.product]\r\n        })\r\n      } else {\r\n        //find product and update count\r\n          let products = state.products.map(p => {\r\n            if(p.code === product.code)\r\n            {\r\n              p.count = p.count + 1;\r\n            }\r\n\r\n            return p;\r\n          })\r\n          return Object.assign({}, state, {\r\n            products\r\n          })\r\n        }\r\n\r\n    case 'REMOVE_PRODUCT':\r\n      //ambiguous, but used to track whether to remove the product entirely, rather than updating count\r\n      let removeProduct = false;\r\n      let products = state.products.map(p => {\r\n        if(p.code === action.product.code)\r\n        {\r\n          //count is updated and the product is removed if the quantity goes from 1 -> 0\r\n          p.count = p.count - 1\r\n          if(p.count === 0)\r\n          {\r\n            removeProduct = true;\r\n          }\r\n        }\r\n\r\n        return p;\r\n      })\r\n      //removed from state when quantity goes from 1->0\r\n      if(removeProduct) {\r\n        return Object.assign({}, state, {\r\n          products: state.products.filter(p => p.code !== action.product.code)\r\n        })\r\n      }\r\n      return Object.assign({}, state, {\r\n        products\r\n      })\r\n          \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default reducers;","import {createStore} from 'redux';\r\nimport reducers from '../reducers';\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}